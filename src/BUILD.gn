# Copyright 2022 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build_overrides/ipcz.gni")
import("//testing/test.gni")

source_set("ipcz") {
  sources = [ "api.cc" ]
  public_deps = [ ":ipcz_sources" ]
  deps = [ "//third_party/abseil-cpp:absl" ]
  public_configs = [ ":ipcz_include_dir" ]
  configs += [ ":ipcz_include_src_dir" ]
}

shared_library("ipcz_shared") {
  output_name = "ipcz"
  sources = [ "api.cc" ]
  public_deps = [ ":ipcz_sources" ]
  deps = [ "//third_party/abseil-cpp:absl" ]
  defines = [ "IPCZ_SHARED_LIBRARY" ]
  public_configs = [ ":ipcz_include_dir" ]
  configs += [ ":ipcz_include_src_dir" ]
}

source_set("ipcz_header") {
  visibility = [ ":*" ]
  public = [ "include/ipcz/ipcz.h" ]
  public_configs = [ ":ipcz_include_dir" ]
}

source_set("ipcz_header_types") {
  public = [ "include/ipcz/ipcz.h" ]
}

source_set("util") {
  visibility = [ ":*" ]

  public = [
    "util/block_allocator.h",
    "util/function.h",
    "util/handle_util.h",
    "util/hex_dump.h",
    "util/log.h",
    "util/mpsc_queue.h",
    "util/mutex_locks.h",
    "util/os_handle.h",
    "util/os_process.h",
    "util/random.h",
    "util/ref_counted.h",
    "util/stack_trace.h",
  ]

  sources = [
    "util/block_allocator.cc",
    "util/hex_dump.cc",
    "util/mpsc_queue.cc",
    "util/mutex_locks.cc",
    "util/os_handle.cc",
    "util/os_process.cc",
    "util/random.cc",
    "util/ref_counted.cc",
    "util/stack_trace.cc",
  ]

  deps = [ "//third_party/abseil-cpp:absl" ]
  public_deps = [ ":ipcz_header" ]

  public_configs = [ ":ipcz_include_dir" ]
  configs += [ ":ipcz_include_src_dir" ]

  if (build_ipcz_standalone) {
    public_deps += [ "${ipcz_src_root}/standalone" ]
    public_configs += [ ":ipcz_standalone_config" ]
  }
}

source_set("impl") {
  visibility = [ ":*" ]

  sources = [
    "ipcz/buffer_id.h",
    "ipcz/driver_memory.cc",
    "ipcz/driver_memory.h",
    "ipcz/driver_memory_mapping.cc",
    "ipcz/driver_memory_mapping.h",
    "ipcz/driver_transport.cc",
    "ipcz/driver_transport.h",
    "ipcz/fragment.cc",
    "ipcz/fragment.h",
    "ipcz/fragment_allocator.cc",
    "ipcz/fragment_allocator.h",
    "ipcz/fragment_descriptor.cc",
    "ipcz/fragment_descriptor.h",
    "ipcz/fragment_ref.cc",
    "ipcz/fragment_ref.h",
    "ipcz/link_side.cc",
    "ipcz/link_side.h",
    "ipcz/link_type.cc",
    "ipcz/link_type.h",
    "ipcz/local_router_link.cc",
    "ipcz/local_router_link.h",
    "ipcz/message_internal.cc",
    "ipcz/message_internal.h",
    "ipcz/message_macros/message_declaration_macros.h",
    "ipcz/message_macros/message_definition_macros.h",
    "ipcz/message_macros/message_dispatch_macros.h",
    "ipcz/message_macros/message_params_declaration_macros.h",
    "ipcz/message_macros/message_params_definition_macros.h",
    "ipcz/message_macros/undef_message_macros.h",
    "ipcz/node.cc",
    "ipcz/node.h",
    "ipcz/node_connector.cc",
    "ipcz/node_connector.h",
    "ipcz/node_link.cc",
    "ipcz/node_link.h",
    "ipcz/node_link_memory.cc",
    "ipcz/node_link_memory.h",
    "ipcz/node_message_defs.h",
    "ipcz/node_messages.cc",
    "ipcz/node_messages.h",
    "ipcz/node_name.cc",
    "ipcz/node_name.h",
    "ipcz/parcel.cc",
    "ipcz/parcel.h",
    "ipcz/parcel_queue.cc",
    "ipcz/parcel_queue.h",
    "ipcz/portal.cc",
    "ipcz/portal.h",
    "ipcz/ref_counted_fragment.cc",
    "ipcz/ref_counted_fragment.h",
    "ipcz/remote_router_link.cc",
    "ipcz/remote_router_link.h",
    "ipcz/route_edge.cc",
    "ipcz/route_edge.h",
    "ipcz/router.cc",
    "ipcz/router.h",
    "ipcz/router_descriptor.cc",
    "ipcz/router_descriptor.h",
    "ipcz/router_link.h",
    "ipcz/router_link_state.cc",
    "ipcz/router_link_state.h",
    "ipcz/router_tracker.cc",
    "ipcz/router_tracker.h",
    "ipcz/sequence_number.h",
    "ipcz/sublink_id.h",
    "ipcz/trap.cc",
    "ipcz/trap.h",
    "ipcz/trap_event_dispatcher.cc",
    "ipcz/trap_event_dispatcher.h",
    "ipcz/trap_set.cc",
    "ipcz/trap_set.h",
  ]

  deps = [ "//third_party/abseil-cpp:absl" ]
  public_deps = [
    ":ipcz_header",
    ":util",
  ]

  public_configs = [ ":ipcz_include_dir" ]
  configs += [ ":ipcz_include_src_dir" ]
}

source_set("ipcz_sources") {
  deps = [
    ":impl",
    ":util",
  ]

  public_deps = [ ":ipcz_header" ]

  public_configs = [ ":ipcz_include_dir" ]
}

source_set("reference_drivers") {
  sources = [
    "reference_drivers/channel.cc",
    "reference_drivers/channel.h",
    "reference_drivers/event.cc",
    "reference_drivers/event.h",
    "reference_drivers/memory.cc",
    "reference_drivers/memory.h",
    "reference_drivers/multiprocess_reference_driver.cc",
    "reference_drivers/multiprocess_reference_driver.h",
    "reference_drivers/single_process_reference_driver.cc",
    "reference_drivers/single_process_reference_driver.h",
  ]

  deps = [
    ":util",
    "//third_party/abseil-cpp:absl",
  ]
  public_deps = [ ":ipcz_header" ]

  configs += [ ":ipcz_include_src_dir" ]
}

config("ipcz_include_dir") {
  include_dirs = [ "${ipcz_include_root}" ]
}

config("ipcz_include_src_dir") {
  include_dirs = [ "${ipcz_src_root}" ]
}

config("ipcz_standalone_config") {
  include_dirs = [ "${ipcz_src_root}/standalone" ]
}

test("ipcz_tests") {
  sources = [
    "api_tests/arm_trap_api_test.cc",
    "api_tests/begin_get_api_test.cc",
    "api_tests/begin_put_api_test.cc",
    "api_tests/close_portal_api_test.cc",
    "api_tests/connect_node_api_test.cc",
    "api_tests/create_node_api_test.cc",
    "api_tests/create_trap_api_test.cc",
    "api_tests/destroy_node_api_test.cc",
    "api_tests/destroy_trap_api_test.cc",
    "api_tests/end_get_api_test.cc",
    "api_tests/end_put_api_test.cc",
    "api_tests/get_api_test.cc",
    "api_tests/merge_portals_api_test.cc",
    "api_tests/open_portals_api_test.cc",
    "api_tests/put_api_test.cc",
    "api_tests/query_portal_status_api_test.cc",
    "integration_tests/connect_test.cc",
    "integration_tests/merge_portals_test.cc",
    "integration_tests/node_test.cc",
    "integration_tests/portal_transfer_test.cc",
    "integration_tests/remote_portal_test.cc",
    "integration_tests/trap_test.cc",
    "ipcz/parcel_queue_test.cc",
    "ipcz/ref_counted_fragment_test.cc",
    "reference_drivers/channel_test.cc",
    "reference_drivers/event_test.cc",
    "reference_drivers/memory_test.cc",
    "reference_drivers/multiprocess_support_test.cc",
    "test/api_test.cc",
    "test/api_test.h",
    "test/multinode_test.cc",
    "test/multinode_test.h",
    "test/multiprocess_test.cc",
    "test/multiprocess_test.h",
    "test/run_all_tests.cc",
    "test/test_base.cc",
    "test/test_base.h",
    "test/test_client.cc",
    "test/test_client.h",
    "util/block_allocator_test.cc",
    "util/mpsc_queue_test.cc",
    "util/ref_counted_test.cc",
  ]

  deps = [
    ":impl",
    ":ipcz",
    ":reference_drivers",
    "//testing/gtest",
    "//third_party/abseil-cpp:absl",
  ]

  configs += [ ":ipcz_include_src_dir" ]
}

group("all") {
  testonly = true
  deps = [
    ":ipcz",
    ":ipcz_shared",
    ":ipcz_tests",
  ]
}
