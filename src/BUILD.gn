# Copyright 2021 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build_overrides/ipcz.gni")
import("//testing/test.gni")

source_set("ipcz") {
  sources = [ "api/api.cc" ]
  public_deps = [ ":ipcz_sources" ]
  deps = [ "//third_party/abseil-cpp:absl" ]
  public_configs = [ ":ipcz_include_dir" ]
  configs += [ ":ipcz_include_src_dir" ]
}

shared_library("ipcz_shared") {
  output_name = "ipcz"
  sources = [ "api/api.cc" ]
  public_deps = [ ":ipcz_sources" ]
  deps = [ "//third_party/abseil-cpp:absl" ]
  defines = [ "IPCZ_SHARED_LIBRARY" ]
  public_configs = [ ":ipcz_include_dir" ]
  configs += [ ":ipcz_include_src_dir" ]
}

source_set("ipcz_sources") {
  visibility = [ ":*" ]

  public = [ "include/ipcz/ipcz.h" ]

  sources = [
    "core/message_internal.cc",
    "core/message_internal.h",
    "core/message_macros/message_declaration_macros.h",
    "core/message_macros/message_definition_macros.h",
    "core/message_macros/message_dispatch_macros.h",
    "core/message_macros/message_handle_data_declaration_macros.h",
    "core/message_macros/message_handle_data_definition_macros.h",
    "core/message_macros/message_handle_declaration_macros.h",
    "core/message_macros/message_handle_definition_macros.h",
    "core/message_macros/message_params_declaration_macros.h",
    "core/message_macros/message_params_definition_macros.h",
    "core/message_macros/message_reply_dispatch_macros.h",
    "core/message_macros/undef_message_macros.h",
    "core/node.cc",
    "core/node.h",
    "core/node_link.cc",
    "core/node_link.h",
    "core/node_message_defs.h",
    "core/node_messages.cc",
    "core/node_messages.h",
    "core/node_name.cc",
    "core/node_name.h",
    "core/parcel.cc",
    "core/parcel.h",
    "core/parcel_queue.cc",
    "core/parcel_queue.h",
    "core/portal.cc",
    "core/portal.h",
    "core/portal_control_block.cc",
    "core/portal_control_block.h",
    "core/side.h",
    "core/trap.cc",
    "core/trap.h",
    "core/trap_event_dispatcher.cc",
    "core/trap_event_dispatcher.h",
    "debug/hex_dump.cc",
    "debug/hex_dump.h",
    "debug/log.cc",
    "debug/log.h",
    "debug/stack_trace.cc",
    "debug/stack_trace.h",
    "mem/atomic_memcpy.cc",
    "mem/atomic_memcpy.h",
    "mem/mpmc_queue.h",
    "mem/mpsc_queue.h",
    "mem/ref_counted.cc",
    "mem/ref_counted.h",
    "mem/seqlocked_data.cc",
    "mem/seqlocked_data.h",
    "mem/spsc_queue.h",
    "os/channel.cc",
    "os/channel.h",
    "os/event.cc",
    "os/event.h",
    "os/handle.cc",
    "os/handle.h",
    "os/memory.cc",
    "os/memory.h",
    "os/process.cc",
    "os/process.h",
    "util/handle_util.h",
    "util/random.cc",
    "util/random.h",
  ]

  deps = [ "//third_party/abseil-cpp:absl" ]

  public_configs = [ ":ipcz_include_dir" ]
  configs += [ ":ipcz_include_src_dir" ]
}

config("ipcz_include_dir") {
  include_dirs = [ "${ipcz_include_root}" ]
}

config("ipcz_include_src_dir") {
  include_dirs = [ "${ipcz_src_root}" ]
}

test("ipcz_tests") {
  sources = [
    "api/api_tests/accept_remote_portal_api_test.cc",
    "api/api_tests/arm_trap_api_test.cc",
    "api/api_tests/begin_get_api_test.cc",
    "api/api_tests/begin_put_api_test.cc",
    "api/api_tests/close_portal_api_test.cc",
    "api/api_tests/create_node_api_test.cc",
    "api/api_tests/create_trap_api_test.cc",
    "api/api_tests/destroy_node_api_test.cc",
    "api/api_tests/destroy_trap_api_test.cc",
    "api/api_tests/end_get_api_test.cc",
    "api/api_tests/end_put_api_test.cc",
    "api/api_tests/get_api_test.cc",
    "api/api_tests/open_portals_api_test.cc",
    "api/api_tests/open_remote_portal_api_test.cc",
    "api/api_tests/put_api_test.cc",
    "api/api_tests/query_portal_status_api_test.cc",
    "api/integration_tests/node_test.cc",
    "api/integration_tests/portal_transfer_test.cc",
    "api/integration_tests/remote_portal_test.cc",
    "mem/mpmc_queue_test.cc",
    "mem/mpsc_queue_test.cc",
    "mem/ref_counted_test.cc",
    "mem/spsc_queue_test.cc",
    "os/channel_test.cc",
    "os/event_test.cc",
    "os/memory_test.cc",
    "os/multiprocess_test.cc",
    "test/api_test.cc",
    "test/api_test.h",
    "test/run_all_tests.cc",
    "test/test_client.cc",
    "test/test_client.h",
  ]

  deps = [
    ":ipcz",
    "//testing/gtest",
    "//third_party/abseil-cpp:absl",
    "//third_party/abseil-cpp/absl/flags:flag",
    "//third_party/abseil-cpp/absl/flags:parse",
  ]

  configs += [ ":ipcz_include_src_dir" ]
}

group("all") {
  testonly = true
  deps = [
    ":ipcz",
    ":ipcz_shared",
    ":ipcz_tests",
  ]
}
